"""
Auto Parts Demo Client Configuration
Generated by GUI Client Generator Demo
"""

try:
    from ..client_config import TRANSFORM_FUNCTIONS, ClientConfig, FieldMapping, registry
except ImportError:
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent))
    from client_config import TRANSFORM_FUNCTIONS, ClientConfig, FieldMapping, registry


def create_auto_parts_demo_config() -> ClientConfig:
    """Create client configuration for Auto Parts Demo."""

    field_mappings = {
        "Status Code": FieldMapping(default_value="200"),
        "Exists": FieldMapping(default_value="No"),
        "Price": FieldMapping(
            css_selector=".price-display, .part-price",
            transform_func=TRANSFORM_FUNCTIONS['extract_numeric']
        ),
        "Availability": FieldMapping(
            css_selector=".stock-info, .availability",
            transform_func=TRANSFORM_FUNCTIONS['clean_text']
        ),
        "Part Number": FieldMapping(
            css_selector=".part-number, .oem-number",
            transform_func=TRANSFORM_FUNCTIONS['normalize_part']
        ),
        "Brand": FieldMapping(
            css_selector=".brand-name, .manufacturer",
            transform_func=TRANSFORM_FUNCTIONS['clean_text']
        ),
        "Category": FieldMapping(
            css_selector=".category, .part-type",
            transform_func=TRANSFORM_FUNCTIONS['clean_text']
        ),
    }

    output_columns = [
        "Part Number", "Status Code", "Exists", "Price",
        "Availability", "Brand", "Category", "Status"
    ]

    return ClientConfig(
        client_id="auto_parts_demo",
        client_name="Auto Parts Demo",
        description="Demo auto parts supplier",
        base_url="https://autoparts-demo.com",
        search_endpoint="/search",
        search_param_name="part",
        product_link_selector=".part-link a",
        field_mappings=field_mappings,
        part_number_regex=r'^[\w\-/\.]{1,64}$',
        normalize_part_number=True,
        exact_match_required=True,
        output_columns=output_columns
    )


def register_auto_parts_demo() -> None:
    """Register the auto parts demo client in the global registry."""
    config = create_auto_parts_demo_config()
    registry.register(config)


# Auto-register when module is imported
register_auto_parts_demo()
