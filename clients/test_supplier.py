"""
Test Supplier Client Configuration
Generated by Generic Scraper Client Generator (CLI)
"""

try:
    from ..client_config import ClientConfig, FieldMapping, registry, TRANSFORM_FUNCTIONS
except ImportError:
    # Fallback for direct execution
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent))
    from client_config import ClientConfig, FieldMapping, registry, TRANSFORM_FUNCTIONS


def create_test_supplier_config() -> ClientConfig:
    """Create client configuration for Test Supplier."""
    
    field_mappings = {
        "Status Code": FieldMapping(default_value="200"),
        "Exists": FieldMapping(default_value="No"),
        "Price": FieldMapping(
            css_selector=".price, .product-price",
            transform_func=TRANSFORM_FUNCTIONS['extract_numeric']
        ),
        "In Stock": FieldMapping(
            css_selector=".stock-status, .availability",
            transform_func=TRANSFORM_FUNCTIONS['clean_text']
        ),
        "Description": FieldMapping(
            css_selector=".description, .product-description",
            transform_func=TRANSFORM_FUNCTIONS['clean_text']
        ),
    }
    
    output_columns = ['Part Number', 'Status Code', 'Exists', 'Price', 'In Stock', 'Description', 'Status']
    
    return ClientConfig(
        client_id="test_supplier",
        client_name="Test Supplier",
        description="Test supplier for parts",
        base_url="https://test-supplier.com",
        search_endpoint="/search",
        search_param_name="query",
        product_link_selector="a.product-item",
        field_mappings=field_mappings,
        part_number_regex=r'^[\w\-/\.]{1,64}$',
        normalize_part_number=True,
        exact_match_required=True,
        output_columns=output_columns
    )


def register_test_supplier() -> None:
    """Register the test supplier client in the global registry."""
    config = create_test_supplier_config()
    registry.register(config)


# Auto-register when module is imported
register_test_supplier()
