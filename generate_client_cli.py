#!/usr/bin/env python3
"""
Command-line Client Generator for Generic Scraper
Creates new client configurations through interactive prompts.
"""

import re
from pathlib import Path
from typing import List, Tuple


def get_input(prompt: str, default: str = "", validator=None) -> str:
    """Get user input with optional default and validation."""
    while True:
        if default:
            user_input = input(f"{prompt} [{default}]: ").strip()
            if not user_input:
                user_input = default
        else:
            user_input = input(f"{prompt}: ").strip()
        
        if validator:
            error = validator(user_input)
            if error:
                print(f"❌ {error}")
                continue
        
        return user_input


def validate_client_id(client_id: str) -> str:
    """Validate client ID format."""
    if not client_id:
        return "Client ID is required"
    
    if not re.match(r'^[a-z0-9_]+$', client_id):
        return "Client ID should contain only lowercase letters, numbers, and underscores"
    
    if len(client_id) < 3:
        return "Client ID should be at least 3 characters long"
    
    # Check if file already exists
    client_file = Path(f"clients/{client_id}.py")
    if client_file.exists():
        return f"A client with ID '{client_id}' already exists"
    
    return ""


def validate_url(url: str) -> str:
    """Validate URL format."""
    if not url:
        return "URL is required"
    
    if not url.startswith(('http://', 'https://')):
        return "URL must start with http:// or https://"
    
    return ""


def collect_field_mappings() -> List[Tuple[str, str, str]]:
    """Collect field mappings from user."""
    print("\n📋 Field Mappings Configuration")
    print("Define what data to extract from product pages.")
    print("Press Enter with empty field name to finish.\n")
    
    fields = []
    
    # Add default fields
    default_fields = [
        ("Price", ".price, .product-price", "extract_numeric"),
        ("In Stock", ".stock-status, .availability", "clean_text"),
        ("Description", ".description, .product-description", "clean_text"),
    ]
    
    print("Adding default fields:")
    for field_name, selector, transform in default_fields:
        print(f"  ✓ {field_name}: {selector} [{transform}]")
        fields.append((field_name, selector, transform))
    
    print("\nAdd additional fields (or press Enter with empty name to continue):")
    
    while True:
        field_name = input("\nField name (e.g., 'Brand', 'Category'): ").strip()
        if not field_name:
            break
        
        css_selector = input("CSS selector (e.g., '.brand', '.category'): ").strip()
        if not css_selector:
            print("❌ CSS selector is required")
            continue
        
        print("Transform function options:")
        print("  1. none - No transformation")
        print("  2. clean_text - Remove extra whitespace") 
        print("  3. extract_numeric - Extract numbers from text")
        print("  4. normalize_part - Normalize part numbers")
        
        transform_choice = input("Choose transform function [2]: ").strip()
        transform_map = {
            '1': 'none',
            '2': 'clean_text',
            '3': 'extract_numeric', 
            '4': 'normalize_part'
        }
        transform = transform_map.get(transform_choice, 'clean_text')
        
        fields.append((field_name, css_selector, transform))
        print(f"  ✓ Added {field_name}")
    
    return fields


def generate_client_code(client_data: dict, field_mappings: List[Tuple[str, str, str]]) -> str:
    """Generate the client configuration code."""
    client_id = client_data['client_id']
    client_name = client_data['client_name']
    
    # Generate field mappings code
    field_mappings_code = []
    output_columns = ["Part Number", "Status Code", "Exists"]
    
    for field_name, css_selector, transform in field_mappings:
        transform_func = f"TRANSFORM_FUNCTIONS['{transform}']" if transform != "none" else "None"
        
        field_code = f'''        "{field_name}": FieldMapping(
            css_selector="{css_selector}",
            transform_func={transform_func}
        ),'''
        field_mappings_code.append(field_code)
        output_columns.append(field_name)
    
    output_columns.append("Status")
    
    # Function names
    func_name = f"create_{client_id}_config"
    register_func_name = f"register_{client_id}"
    
    # Generate the code
    code = f'''"""
{client_name} Client Configuration
Generated by Generic Scraper Client Generator (CLI)
"""

try:
    from ..client_config import ClientConfig, FieldMapping, registry, TRANSFORM_FUNCTIONS
except ImportError:
    # Fallback for direct execution
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent))
    from client_config import ClientConfig, FieldMapping, registry, TRANSFORM_FUNCTIONS


def {func_name}() -> ClientConfig:
    """Create client configuration for {client_name}."""
    
    field_mappings = {{
        "Status Code": FieldMapping(default_value="200"),
        "Exists": FieldMapping(default_value="No"),
{chr(10).join(field_mappings_code)}
    }}
    
    output_columns = {output_columns}
    
    return ClientConfig(
        client_id="{client_id}",
        client_name="{client_name}",
        description="{client_data['description']}",
        base_url="{client_data['base_url']}",
        search_endpoint="{client_data['search_endpoint']}",
        search_param_name="{client_data['search_param']}",
        product_link_selector="{client_data['product_selector']}",
        field_mappings=field_mappings,
        part_number_regex=r'^[\\w\\-/\\.]{{1,64}}$',
        normalize_part_number={client_data['normalize_parts']},
        exact_match_required={client_data['exact_match']},
        output_columns=output_columns
    )


def {register_func_name}():
    """Register {client_name} client."""
    config = {func_name}()
    registry.register(config)


# Auto-register when module is imported
{register_func_name}()
'''
    
    return code


def update_init_file(client_id: str):
    """Update clients/__init__.py to include the new client."""
    init_file = Path("clients/__init__.py")
    if not init_file.exists():
        return
    
    content = init_file.read_text()
    
    # Add import and registration
    import_line = f"    from .{client_id} import register_{client_id}"
    register_line = f"    register_{client_id}()"
    
    if import_line not in content:
        lines = content.split('\n')
        
        # Find the imports section and add the new import
        for i, line in enumerate(lines):
            if "# Add your new clients here:" in line:
                lines.insert(i, import_line)
                break
        
        # Find the registration section and add the new registration call
        for i, line in enumerate(lines):
            if "# register_my_client()  # Uncomment when you add a new client" in line:
                lines.insert(i, register_line)
                break
        
        # Write back
        init_file.write_text('\n'.join(lines))


def main():
    """Main CLI client generator."""
    print("🚀 Generic Scraper - Client Generator (CLI)")
    print("=" * 50)
    print("This tool will help you create a new client configuration.\n")
    
    # Collect basic information
    print("📝 Basic Information")
    client_id = get_input("Client ID (unique, lowercase, no spaces)", validator=validate_client_id)
    client_name = get_input("Client Display Name", default=client_id.replace('_', ' ').title())
    description = get_input("Description", default=f"{client_name} product scraper")
    
    # Collect website configuration
    print("\n🌐 Website Configuration")
    base_url = get_input("Base URL (e.g., https://example.com)", validator=validate_url)
    search_endpoint = get_input("Search Endpoint", default="/search")
    search_param = get_input("Search Parameter Name", default="q")
    product_selector = get_input("Product Link CSS Selector", default="a.product-link")
    
    # Options
    print("\n⚙️  Options")
    normalize_parts = get_input("Normalize part numbers? (y/n)", default="y").lower().startswith('y')
    exact_match = get_input("Require exact match? (y/n)", default="y").lower().startswith('y')
    
    # Collect field mappings
    field_mappings = collect_field_mappings()
    
    # Prepare client data
    client_data = {
        'client_id': client_id,
        'client_name': client_name,
        'description': description,
        'base_url': base_url,
        'search_endpoint': search_endpoint,
        'search_param': search_param,
        'product_selector': product_selector,
        'normalize_parts': normalize_parts,
        'exact_match': exact_match
    }
    
    # Generate code
    print("\n🔧 Generating client configuration...")
    try:
        code = generate_client_code(client_data, field_mappings)
        
        # Write to file
        client_file = Path(f"clients/{client_id}.py")
        client_file.write_text(code, encoding='utf-8')
        
        # Update __init__.py
        update_init_file(client_id)
        
        print(f"✅ Success! Client '{client_id}' has been generated.")
        print(f"📁 File created: {client_file}")
        print(f"🎯 The client will appear in the scraper menu next time you run it.")
        print(f"\n🚀 To test your new client:")
        print(f"   ./venv/bin/python refactored.py --client {client_id}")
        
    except Exception as e:
        print(f"❌ Error generating client: {str(e)}")


if __name__ == "__main__":
    main()