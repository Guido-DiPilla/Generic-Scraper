#!/usr/bin/env python3
"""
GUI Client Generator Demo
Shows the GUI interface structure and creates a sample client.
"""

import tkinter as tk
from tkinter import ttk, messagebox
from pathlib import Path
import time


def demo_gui_client_generator():
    """Demonstrate the GUI client generator interface."""
    
    print("🚀 Launching GUI Client Generator Demo...")
    
    # Create root window
    root = tk.Tk()
    root.title("Generic Scraper - Client Generator")
    root.geometry("800x600")
    
    # Create a simple demo interface
    main_frame = ttk.Frame(root)
    main_frame.pack(fill='both', expand=True, padx=20, pady=20)
    
    # Title
    title_label = ttk.Label(main_frame, text="Generic Scraper - Client Generator", 
                           font=('Arial', 16, 'bold'))
    title_label.pack(pady=(0, 20))
    
    # Demo content
    demo_text = tk.Text(main_frame, height=25, width=80, wrap='word')
    demo_text.pack(fill='both', expand=True)
    
    demo_content = """🎯 GUI Client Generator Features:

📝 Tab 1: Basic Information
   • Client ID (validated, unique)
   • Client Display Name  
   • Description

🌐 Tab 2: Website Configuration
   • Base URL (with validation)
   • Search Endpoint (/search, /find, etc.)
   • Search Parameter Name (q, query, search)
   • Product Link CSS Selector
   • Options: Normalize parts, Exact match

📋 Tab 3: Field Mappings
   • Interactive field editor
   • Add/Edit/Remove fields
   • CSS selector input with help
   • Transform function selection:
     - clean_text: Remove whitespace
     - extract_numeric: Extract numbers  
     - normalize_part: Normalize part numbers
   • Pre-built common fields (Price, Stock, Description)

🔧 Tab 4: Preview & Generate
   • Live code preview window
   • Generate client file button
   • Save/Load templates
   • Validation and error checking

✨ Key Features:
   ✅ Real-time input validation
   ✅ CSS selector help and examples
   ✅ Conflict detection (duplicate IDs)
   ✅ Template save/load for reuse
   ✅ Live preview of generated code
   ✅ Automatic client registration
   ✅ Professional tabbed interface

🎮 Interactive Elements:
   • Form fields with validation
   • Dropdown menus for options
   • Checkboxes for boolean settings
   • Multi-line text areas for descriptions
   • Tree view for field mappings
   • Scrollable code preview
   • File dialogs for template management

The GUI makes creating new clients incredibly easy - just fill out the forms 
and click "Generate Client File"!

This demo shows the interface structure. In a real environment with display,
you'd get the full interactive GUI experience.

Closing this demo window in 10 seconds..."""
    
    demo_text.insert(1.0, demo_content)
    demo_text.config(state='disabled')
    
    # Demo client generation
    def create_demo_client():
        """Create a demo client to show the generation process."""
        print("📝 Demo: Creating a sample client...")
        
        # Simulate GUI form data
        client_data = {
            'client_id': 'auto_parts_demo',
            'client_name': 'Auto Parts Demo',
            'description': 'Demo auto parts supplier',
            'base_url': 'https://autoparts-demo.com',
            'search_endpoint': '/search',
            'search_param': 'part',
            'product_selector': '.part-link a',
            'normalize_parts': True,
            'exact_match': True
        }
        
        field_mappings = [
            ('Price', '.price-display, .part-price', 'extract_numeric'),
            ('Availability', '.stock-info, .availability', 'clean_text'),
            ('Part Number', '.part-number, .oem-number', 'normalize_part'),
            ('Brand', '.brand-name, .manufacturer', 'clean_text'),
            ('Category', '.category, .part-type', 'clean_text')
        ]
        
        # Generate client code (simplified version)
        client_code = f'''"""
{client_data['client_name']} Client Configuration
Generated by GUI Client Generator Demo
"""

try:
    from ..client_config import ClientConfig, FieldMapping, registry, TRANSFORM_FUNCTIONS
except ImportError:
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent))
    from client_config import ClientConfig, FieldMapping, registry, TRANSFORM_FUNCTIONS


def create_{client_data['client_id']}_config() -> ClientConfig:
    """Create client configuration for {client_data['client_name']}."""
    
    field_mappings = {{
        "Status Code": FieldMapping(default_value="200"),
        "Exists": FieldMapping(default_value="No"),
        "Price": FieldMapping(
            css_selector=".price-display, .part-price",
            transform_func=TRANSFORM_FUNCTIONS['extract_numeric']
        ),
        "Availability": FieldMapping(
            css_selector=".stock-info, .availability",
            transform_func=TRANSFORM_FUNCTIONS['clean_text']
        ),
        "Part Number": FieldMapping(
            css_selector=".part-number, .oem-number",
            transform_func=TRANSFORM_FUNCTIONS['normalize_part']
        ),
        "Brand": FieldMapping(
            css_selector=".brand-name, .manufacturer",
            transform_func=TRANSFORM_FUNCTIONS['clean_text']
        ),
        "Category": FieldMapping(
            css_selector=".category, .part-type",
            transform_func=TRANSFORM_FUNCTIONS['clean_text']
        ),
    }}
    
    output_columns = [
        "Part Number", "Status Code", "Exists", "Price", 
        "Availability", "Brand", "Category", "Status"
    ]
    
    return ClientConfig(
        client_id="{client_data['client_id']}",
        client_name="{client_data['client_name']}",
        description="{client_data['description']}",
        base_url="{client_data['base_url']}",
        search_endpoint="{client_data['search_endpoint']}",
        search_param_name="{client_data['search_param']}",
        product_link_selector="{client_data['product_selector']}",
        field_mappings=field_mappings,
        part_number_regex=r'^[\\w\\-/\\.]{{1,64}}$',
        normalize_part_number={client_data['normalize_parts']},
        exact_match_required={client_data['exact_match']},
        output_columns=output_columns
    )


def register_{client_data['client_id']}():
    """Register {client_data['client_name']} client."""
    config = create_{client_data['client_id']}_config()
    registry.register(config)


# Auto-register when module is imported
register_{client_data['client_id']}()
'''
        
        # Write the demo client file
        client_file = Path(f"clients/{client_data['client_id']}.py")
        client_file.write_text(client_code, encoding='utf-8')
        
        print(f"✅ Demo client created: {client_file}")
        print(f"🎯 Client ID: {client_data['client_id']}")
        print(f"📝 Client Name: {client_data['client_name']}")
        
        # Update __init__.py to register the demo client
        init_file = Path("clients/__init__.py")
        if init_file.exists():
            content = init_file.read_text()
            import_line = f"    from .{client_data['client_id']} import register_{client_data['client_id']}"
            register_line = f"    register_{client_data['client_id']}()"
            
            if import_line not in content:
                lines = content.split('\n')
                # Add import
                for i, line in enumerate(lines):
                    if "# Add your new clients here:" in line:
                        lines.insert(i, import_line)
                        break
                
                # Add registration
                for i, line in enumerate(lines):
                    if "# register_my_client()  # Uncomment when you add a new client" in line:
                        lines.insert(i, register_line)
                        break
                
                init_file.write_text('\n'.join(lines))
                print("✅ Client registered in __init__.py")
        
        return client_data['client_id']
    
    # Create demo client button
    demo_button = ttk.Button(main_frame, text="🎮 Create Demo Client", 
                            command=create_demo_client)
    demo_button.pack(pady=10)
    
    # Auto-close after demo
    def close_demo():
        print("🔚 Demo completed!")
        root.quit()
        root.destroy()
    
    # Set up auto-close timer
    root.after(10000, close_demo)  # Close after 10 seconds
    
    print("📱 GUI Demo Window opened - showing client generator interface...")
    print("⏰ Window will auto-close in 10 seconds, or click 'Create Demo Client' to test...")
    
    # Start the GUI
    root.mainloop()
    
    # Return demo status
    return True


if __name__ == "__main__":
    try:
        success = demo_gui_client_generator()
        if success:
            print("\n🎉 GUI Demo completed successfully!")
            print("💡 In a real environment with display, you'd get the full interactive GUI.")
    except Exception as e:
        print(f"❌ Demo error: {e}")
        print("💡 This may happen in headless environments. Use the CLI version instead:")
        print("   ./venv/bin/python generate_client_cli.py")